image: node:alpine

stages:
  - test
  - build
  - deploy

cache:
  paths:
    - node_modules/

# unit testing, lint and dependency install
test:
  stage: test
  script:
    - cd frontend/
    - npm install --progress=false #install dependencies
    - node_modules/eslint/bin/eslint.js src/ # run linter
    - CI=true npm test -- --coverage # run tests and output coverage
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ # regex for getting coverage percentage as int

# install dependencies and build for deployment
build:
  stage: build
  script:
    - cd frontend/
    - npm install --progress=false
    - npm run build
  artifacts:
    paths:
      - frontend/build/ # keep built files for deployment as artifacts

# staging step before production
staging:
  image: alpine # alpine - small linux distribution ~5MB
  stage: deploy
  before_script:
    # install missing dependencies for running web-app
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - 'which rsync || ( apk add rsync )'
    - 'which docker || ( apk add docker )'
    # set up auth keys for ssh and rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_STAGING" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -p $VPS_PORT_STAGING -H $VPS_IP_STAGING >> ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # rsync built files to the docker build stage
    - rsync -ave "ssh -p $VPS_PORT_STAGING" --delete frontend/build $VPS_USER@$VPS_IP_STAGING:/home/$VPS_USER/docker/
    # run docker-compose with nginx
    - ssh -p $VPS_PORT_STAGING $VPS_USER@$VPS_IP_STAGING "cd docker/ && docker-compose down && docker-compose up -d"
  cache: {}
  only:
    - master
  environment:
    name: staging
    url: $URL_STAGING

production:
  image: alpine
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - 'which rsync || ( apk add rsync )'
    - 'which docker || ( apk add docker )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_PRODUCTION" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -p $VPS_PORT_PRODUCTION -H $VPS_IP_PRODUCTION >> ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - rsync -ave "ssh -p $VPS_PORT_PRODUCTION" --delete frontend/build $VPS_USER@$VPS_IP_PRODUCTION:/home/$VPS_USER/docker/
    - ssh -p $VPS_PORT_PRODUCTION $VPS_USER@$VPS_IP_PRODUCTION "cd docker/ && docker-compose down && docker-compose up
      -d"
  cache: {}
  only:
    - master
  environment:
    name: production
    url: http://$VPS_IP_PRODUCTION/
  when: manual
